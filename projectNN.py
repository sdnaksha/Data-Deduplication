# =============================================================================
# AUSTRALIAN NATIONAL UNIVERSITY OPEN SOURCE LICENSE (ANUOS LICENSE)
# VERSION 1.3
# 
# The contents of this file are subject to the ANUOS License Version 1.2
# (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at:
# 
#   http://datamining.anu.edu.au/linkage.html
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
# 
# The Original Software is: "febrl"
# 
# The Initial Developers of the Original Software are:
#   Peter Christen
# 
# Copyright (C) 2002 - 2011 the Australian National University and
# others. All Rights Reserved.
# 
# Contributors:
# 
# Alternatively, the contents of this file may be used under the terms
# of the GNU General Public License Version 2 or later (the "GPL"), in
# which case the provisions of the GPL are applicable instead of those
# above. The GPL is available at the following URL: http://www.gnu.org/
# If you wish to allow use of your version of this file only under the
# terms of the GPL, and not to allow others to use your version of this
# file under the terms of the ANUOS License, indicate your decision by
# deleting the provisions above and replace them with the notice and
# other provisions required by the GPL. If you do not delete the
# provisions above, a recipient may use your version of this file under
# the terms of any one of the ANUOS License or the GPL.
# =============================================================================

# =============================================================================
# Start of Febrl project module: "projectNN.py"
# =============================================================================

# Import necessary modules (Python standard modules first, then Febrl modules)

import logging

import classification
import comparison
import dataset
import encode
import indexing
import measurements
import mymath
import output
import stringcmp
from neuralNetwork import NeuralNetwork

# -----------------------------------------------------------------------------
# Intialise a logger, set level to info oe warning
#
log_level = logging.INFO # logging.WARNING

my_logger = logging.getLogger()
my_logger.setLevel(log_level)

# -----------------------------------------------------------------------------
# Febrl project type: Deduplicate
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------

# Define input data set A:
#
data_set_a = dataset.DataSetCSV(description="Data set generated by Febrl GUI",
                                access_mode="read",
                                strip_fields=True,
                                miss_val=[''],
                                rec_ident="rec_id",
                                file_name="/home/suman/Documents/gen_data/dataset2withAns.csv",
                                header_line=True,
                                delimiter=",",
                                field_list = [("rec_id",0),
                                              ("given_name",1),
                                              ("surname",2),
                                              ("street_number",3),
                                              ("address_1",4),
                                              ("address_2",5),
                                              ("suburb",6),
                                              ("postcode",7),
                                              ("state",8),
                                              ("date_of_birth",9),
                                              ("soc_sec_id",10),
                                              ("Targets",11)])


# -----------------------------------------------------------------------------

# Define field comparison functions
#
fc_funct_1 = comparison.FieldComparatorExactString(agree_weight = 1.0,
                                                   description = "Str-Exact-Targets-Targets",
                                                   disagree_weight = 0.0,
                                                   missing_weight = 0.0)

fc_funct_2 = comparison.FieldComparatorJaro(agree_weight = 1.0,
                                            description = "Jaro-surname-surname",
                                            disagree_weight = 0.0,
                                            missing_weight = 0.3,
                                            threshold = 0.7)

fc_funct_3 = comparison.FieldComparatorTruncateString(agree_weight = 1.0,
                                                      description = "Str-Truncate-given_name-given_name",
                                                      disagree_weight = 0.0,
                                                      missing_weight = 0.3,
                                                      num_char_compared = 3)

fc_funct_4 = comparison.FieldComparatorNumericAbs(agree_weight = 1.0,
                                                  description = "Num-Abs-street_number-street_number",
                                                  disagree_weight = 0.0,
                                                  missing_weight = 0.0,
                                                  max_abs_diff = 10)

fc_funct_5 = comparison.FieldComparatorEditDist(agree_weight = 1.0,
                                                description = "Edit-Dist-address_1-address_1",
                                                disagree_weight = 0.0,
                                                missing_weight = 0.0,
                                                threshold = 0.7)

fc_funct_6 = comparison.FieldComparatorLCS(agree_weight = 1.0,
                                           description = "Long-Common-Seq-suburb-suburb",
                                           disagree_weight = 0.0,
                                           missing_weight = 0.0,
                                           threshold = 0.7,
                                           common_divisor = "shortest",
                                           min_common_len = 5)

fc_funct_7 = comparison.FieldComparatorKeyDiff(agree_weight = 1.0,
                                               description = "Key-Diff-postcode-postcode",
                                               disagree_weight = 0.0,
                                               missing_weight = 0.0,
                                               max_key_diff = 1)

fc_funct_8 = comparison.FieldComparatorQGram(agree_weight = 1.0,
                                             description = "Q-Gram-state-state",
                                             disagree_weight = 0.0,
                                             missing_weight = 0.0,
                                             threshold = 0.8,
                                             q = 2,
                                             common_divisor = "shortest",
                                             padded = True)

fc_funct_9 = comparison.FieldComparatorAge(agree_weight = 1.0,
                                           description = "Age-date_of_birth-date_of_birth",
                                           disagree_weight = 0.0,
                                           missing_weight = 0.0,
                                           fix_date = "today",
                                           max_perc_diff = 10,
                                           date_format = "yyyymmdd")

fc_funct_10 = comparison.FieldComparatorNumericPerc(agree_weight = 1.0,
                                                   description = "Num-Perc-soc_sec_id-soc_sec_id",
                                                   disagree_weight = 0.0,
                                                   missing_weight = 0.0,
                                                   max_perc_diff = 25)

field_comp_list = [(fc_funct_1, "Targets", "Targets"),
                   (fc_funct_2, "surname", "surname"),
                   (fc_funct_3, "given_name", "given_name"),
                   (fc_funct_4, "street_number", "street_number"),
                   (fc_funct_5, "address_1", "address_1"),
                   (fc_funct_6, "suburb", "suburb"),
                   (fc_funct_7, "postcode", "postcode"),
                   (fc_funct_8, "state", "state"),
                   (fc_funct_9, "date_of_birth", "date_of_birth"),
                   (fc_funct_10, "soc_sec_id", "soc_sec_id")]

rec_comp = comparison.RecordComparator(data_set_a, data_set_a, field_comp_list)

# -----------------------------------------------------------------------------

# Define indices for "blocking"
#
index_def_1 = [["postcode", "postcode", False, False, None, [encode.get_substring, 0,1]]]

index = indexing.BlockingIndex(dataset1 = data_set_a,
                               dataset2 = data_set_a,
                               weight_vec_file = "/home/suman/Documents/output/wtVecNN2.txt",
                               progress_report = 10,
                               rec_comparator = rec_comp,
                               index_sep_str = "",
                               skip_missing = True,
                               index_def = [index_def_1])

# Build and compact index
#
index.build()

index.compact()

# Do record pair comparisons
#
index.run()

[field_names_list, w_vec_dict] = output.LoadWeightVectorFile("/home/suman/Documents/output/wtVecNN.txt")
[field_names_list2, w_vec_dict2] = output.LoadWeightVectorFile("/home/suman/Documents/output/wtVecNN2.txt")


# -----------------------------------------------------------------------------

# Define weight vector (record pair) classifier
#
classifier = classification.SuppVecMachine(kernel_type = "LINEAR",
                                           C = 10)

# Get true match and non-match status for supervised classifier

# Define function to get the match status
#
def match_status_funct(red_id1,rec_id2,w_vec):
  return (w_vec[0] == 1.0)

# Get true match and non-match sets
#
[tm_set, tnm_set] = classification.get_true_matches_nonmatches(w_vec_dict, match_status_funct)
[tm_set2, tnm_set2] = classification.get_true_matches_nonmatches(w_vec_dict2, match_status_funct)

# Remove the match status element from weight vectors

class_w_vec_dict = classification.extract_collapse_weight_vectors([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,)], w_vec_dict)

class_w_vec_dict2 = classification.extract_collapse_weight_vectors([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,)], w_vec_dict2)

#class_w_vec_dict = w_vec_dict2

classifier = NeuralNetwork()
network = classifier.train(class_w_vec_dict, tm_set, tnm_set)
[tp, fp, tn, fn, pm, pnm, m_set, nm_set] = classifier.testAndClassify(network, class_w_vec_dict2, tm_set2, tnm_set2)

print "Number of true positives: ", tp
print "Number of false positives:", fp
print "Number of true negatives: ", tn
print "Number of false negatives:", fn
print "Number of possible matches:", pm 
print "Number of possible non matches:", pnm 

# Evaluate linkage quality and complexity
#
acc, prec, reca, fmeas = measurements.quality_measures(w_vec_dict2, m_set, nm_set, match_status_funct)
print "Accuracy: ", acc
print "Precision:", prec
print "Recall:   ", reca
print "F-measure:", fmeas

rr = measurements.reduction_ratio(w_vec_dict2, data_set_a, data_set_a)
print "Reduction ratio:", rr

pq = measurements.pairs_quality(w_vec_dict2, match_status_funct)
print "Pairs quality:  ", pq

# -----------------------------------------------------------------------------

# Define output file options
#
histo_str_list = output.GenerateHistogram(class_w_vec_dict2, 1.0, "/home/suman/Documents/output/SVMhist2")

for line in histo_str_list:
  print line
output.SaveMatchDataSet(m_set, data_set_a, "match_id", "/home/suman/Documents/gen_data/dataset2withAns-match.csv")


# =============================================================================
# End of Febrl project module: "projectNN.py"
# =============================================================================
